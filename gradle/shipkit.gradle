// Main configuration of Shipkit
shipkit {
    // MANDATORY GitHub repository (owner/repo) where project is hosted.
    // It's a part of the full repo link e.g.: https://github.com/mockito/shipkit-example
    gitHub.repository = "mockito/shipkit-example"

    // MANDATORY Read only GitHub token. It's used for read contributors and Pull Request
    // information for release notes. There is Rate limit for each interaction with GitHub API, so
    // you should use your custom token to not spend quota of default Shipkit-example token.
    gitHub.readOnlyAuthToken = "e7fe8fcdd6ffed5c38498c4c79b2a68e6f6ed1bb"

    // OPTIONAL Write GitHub token. It's used for push changes (release notes and git tag) to the
    // GitHub repository.
    // Please do not configure write auth token in plain text / commit to VCS!
    // Shipkit automatically uses "GH_WRITE_TOKEN" env variable - you should configure it in TravisCI.
//    gitHub.writeAuthToken = System.getenv("GH_WRITE_TOKEN")

    // OPTIONAL GitHub url, default: https://github.com
    // It's useful when you're using on-premises GitHub Enterprise.
//    gitHub.url = "https://github.com"

    // OPTIONAL GitHub API url, default: https://api.github.com
    // It's useful when you're using on-premises GitHub Enterprise.
//    gitHub.apiUrl = "https://api.github.com"

    // OPTIONAL GitHub write auth user, default: dummy
    // Some interactions with GitHub API should be done using user-token combination
    // https://developer.github.com/v3/auth/#via-oauth-tokens
    // but in our cases auth user looks like not validated by GitHub.
    // There is a possibility to set it in case this will work someday.
//    gitHub.writeAuthUser = "dummy"

    // OPTIONAL Commits containing defined text will be not included in release notes, default: [ci skip]
    // You can configure a few strings for that.
    // You should consider also set up: git.commitMessagePostfix
    releaseNotes.ignoreCommitsContaining = ["[ci skip]"]

    // OPTIONAL Path to file where release notes will be generated by Shipkit, default: docs/release-notes.md
//    releaseNotes.file = "docs/release-notes.md"

    // OPTIONAL Labels mapping using by release notes generation, default: empty map
    // If you define this mapping and add 'bug' label to Pull Request before merge then in release notes
    // you will see [Bugfix] prefix before your PR name.
//    releaseNotes.labelMapping = [
//            'bug': 'Bugfix',
//            'enhancement': 'New Feature'
//    ]

    // OPTIONAL Publication Repository where we look for your published binary, default: empty
    // It is currently used to configure repository Badge URL when generating release notes.
//    releaseNotes.publicationRepository = ""

    // OPTIONAL Git user for creating commit, tag and Pull Request with release notes, default: shipkit-org
//    git.user = "shipkit-org"

    // OPTIONAL Git user email for creating commit, tag and Pull Request with release notes,
    // default: <shipkit.org@gmail.com>
//    git.email = "<shipkit.org@gmail.com>"

    // OPTIONAL Regex to be used to identify branches that are entitled to be released,
    // default: master|release/.+
//    git.releasableBranchRegex = "master|release/.+"

    // OPTIONAL Prefix added to the version to create VCS-addressable tag, default: v
    // Empty string is ok and it means that there is not prefix.
//    git.tagPrefix = "v"

    // OPTIONAL Commits containing defined text will not execute build on CI, default: [ci skip]
    // This text will be included in the commit message for all commits automatically created by Shipkit.
//     git.commitMessagePostfix = "[ci skip]"

    // OPTIONAL Developers to include in generated pom file in section developers, default empty list
    // It should be a collection of elements like "GITHUB_USER:FULL_NAME"
    // For release to Maven Central this is mandatory.
    team.developers = ['szczepiq:Szczepan Faber', 'mstachniuk:Marcin Stachniuk', 'wwilk:Wojtek Wilk']

    // OPTIONAL Contributors to include in generated pom file in section contributors, default empty list
    // It should be a collection of elements like "GITHUB_USER:FULL_NAME"
    // Those contributors will be on the list in pom file before other contributors read from GitHub
//    team.contributors = []

    // OPTIONAL Contributors to be ignored in release notes and generated pom file, default empty list
    // It should be VCS name (e.g. 'Szczepan Faber', 'shipkit-org', 'Marcin Stachniuk').
    // Ignored contributors takes precedence over contributors configuration.
//    team.ignoredContributors = []

    // OPTIONAL GitHub repository (owner/repo) where Javadocs are shipped.
    // To enable shipping Javadoc you need to apply Javadoc plugin first:
    // apply plugin: "org.shipkit.javadoc"
    // The default value is gitHub.repository + "-javadoc", so in this project case:
    // https://github.com/mockito/shipkit-example-javadoc
//    javadoc.repository = "mstachniuk/shipkit-example-javadoc"

    // OPTIONAL GitHub Javadoc repository branch name. The branch needs to exist.
    // By default it's using the branch set as main in GitHub repo, usually master.
    // To enable shipping Javadoc you need to apply Javadoc plugin first:
    // apply plugin: "org.shipkit.javadoc"
//    javadoc.repositoryBranch = ""

    // OPTIONAL GitHub Javadoc repository directory where put javadoc files. By default it's project root directory.
    // To enable shipping Javadoc you need to apply Javadoc plugin first:
    // apply plugin: "org.shipkit.javadoc"
//    javadoc.repositoryDirectory = ""

    // OPTIONAL Commit message used to commit Javadocs. Default: "Update current and ${version} Javadocs. [ci skip]"
    // You can override this message and ${version} will be replaced by currently build version.
    // You don't need to specify "[ci skip]" in your message - it will be added automatically.
    // To enable shipping Javadoc you need to apply Javadoc plugin first:
    // apply plugin: "org.shipkit.javadoc"
//    javadoc.commitMessage = ""

}

allprojects {
    plugins.withId("com.jfrog.bintray") {
        bintray {
            pkg {
                repo = 'examples'
                user = 'szczepiq'
                userOrg = 'shipkit'                
                name = "basic"
                licenses = ['MIT']
                labels = ['continuous delivery', 'release automation', 'mockito', 'shipkit']
            }
        }
    }

    plugins.withId("org.shipkit.java-publish") {
        publishing.publications.javaLibrary.pom.withXml {
            //refer to Groovy xml Node reference for more info how to manipulate xml
            asNode().licenses.replaceNode {
                licenses {
                    license {
                        name "Eclipse Public License v2.0"
                        url "http://www.eclipse.org/legal/epl-v20.html"
                    }
                }
            }
        }
    }
}